{
	"info": {
		"_postman_id": "9ada6098-54dc-474a-867b-eb96d4acc281",
		"name": "Endpoint 3er Parcial",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25131478"
	},
	"item": [
		{
			"name": "Get All Projects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Verifica que el código de estado de la respuesta sea 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Verifica que la respuesta tenga los campos requeridos\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(project) {\r",
							"        pm.expect(project).to.have.property('Id');\r",
							"        pm.expect(project).to.have.property('Content');\r",
							"        pm.expect(project).to.have.property('ItemsCount');\r",
							"        pm.expect(project).to.have.property('Icon');\r",
							"        pm.expect(project).to.have.property('ItemType');\r",
							"        pm.expect(project).to.have.property('ParentId');\r",
							"        pm.expect(project).to.have.property('Collapsed');\r",
							"        pm.expect(project).to.have.property('ItemOrder');\r",
							"        pm.expect(project).to.have.property('Children');\r",
							"        pm.expect(project).to.have.property('IsProjectShared');\r",
							"        pm.expect(project).to.have.property('ProjectShareOwnerName');\r",
							"        pm.expect(project).to.have.property('ProjectShareOwnerEmail');\r",
							"        pm.expect(project).to.have.property('IsShareApproved');\r",
							"        pm.expect(project).to.have.property('IsOwnProject');\r",
							"        pm.expect(project).to.have.property('LastSyncedDateTime');\r",
							"        pm.expect(project).to.have.property('LastUpdatedDate');\r",
							"        pm.expect(project).to.have.property('Deleted');\r",
							"        pm.expect(project).to.have.property('SyncClientCreationId');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 3. Valida la estructura de los proyectos y los hijos\r",
							"pm.test(\"Validate the structure of the response JSON\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(project) {\r",
							"        pm.expect(project).to.be.an('object');\r",
							"        pm.expect(project.Id).to.exist.and.to.be.a('number');\r",
							"        pm.expect(project.Content).to.exist.and.to.be.a('string');\r",
							"        pm.expect(project.ItemsCount).to.exist.and.to.be.a('number');\r",
							"        pm.expect(project.Icon).to.exist.and.to.be.a('number');\r",
							"        pm.expect(project.ItemType).to.exist.and.to.be.a('number');\r",
							"        pm.expect(project.ParentId).to.be.null;\r",
							"        pm.expect(project.Collapsed).to.exist.and.to.be.a('boolean');\r",
							"        pm.expect(project.ItemOrder).to.exist.and.to.be.a('number');\r",
							"        pm.expect(project.Children).to.be.an('array');\r",
							"        project.Children.forEach(function(child) {\r",
							"            pm.expect(child).to.be.an('object');\r",
							"            pm.expect(child.Id).to.exist.and.to.be.a('number');\r",
							"            pm.expect(child.Content).to.exist.and.to.be.a('string');\r",
							"            pm.expect(child.ItemsCount).to.exist.and.to.be.a('number');\r",
							"            pm.expect(child.Icon).to.exist.and.to.be.a('number');\r",
							"            pm.expect(child.ItemType).to.exist.and.to.be.a('number');\r",
							"            pm.expect(child.ParentId).to.equal(project.Id, \"ParentId of child should match Id of parent\");\r",
							"            pm.expect(child.Collapsed).to.exist.and.to.be.a('boolean');\r",
							"            pm.expect(child.ItemOrder).to.exist.and.to.be.a('number');\r",
							"            pm.expect(child.Children).to.be.an('array');\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Verifica que el tiempo de respuesta sea menor a 500 ms\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"// 5. Valida que `Content` sea una cadena no vacía\r",
							"pm.test(\"Content is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    responseData.forEach(function(project) {\r",
							"        pm.expect(project.Content).to.be.a(\"string\").and.to.have.lengthOf.at.least(1, \"Content should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Verifica que `IsOwnProject` sea `true` para todos los proyectos\r",
							"pm.test(\"User owns all projects\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    responseData.forEach(function(project) {\r",
							"        pm.expect(project.IsOwnProject).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"// 7. Verifica que `LastSyncedDateTime` esté en el formato `/Date(timestamp)/`\r",
							"pm.test(\"LastSyncedDateTime is in valid /Date(timestamp)/ format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    responseData.forEach(function(project) {\r",
							"        pm.expect(project.LastSyncedDateTime).to.match(/^\\/Date\\(\\d+\\)\\/$/, \"LastSyncedDateTime should be in /Date(timestamp)/ format\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// 8. Verifica que los campos `ProjectShareOwnerName` y `ProjectShareOwnerEmail` sean siempre `null`\r",
							"pm.test(\"ProjectShareOwnerName and ProjectShareOwnerEmail are null\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    responseData.forEach(function(project) {\r",
							"        pm.expect(project.ProjectShareOwnerName).to.be.null;\r",
							"        pm.expect(project.ProjectShareOwnerEmail).to.be.null;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "jose.condori.r@ucb.edu.bo",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}api/projects.json",
					"host": [
						"{{url}}api"
					],
					"path": [
						"projects.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que el código de estado de la respuesta sea 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verifica que la respuesta tenga los campos requeridos\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property(\"Id\");\r",
							"    pm.expect(responseData).to.have.property(\"Content\");\r",
							"    pm.expect(responseData).to.have.property(\"LastSyncedDateTime\");\r",
							"    pm.expect(responseData).to.have.property(\"LastUpdatedDate\");\r",
							"});\r",
							"\r",
							"// Verifica que `LastSyncedDateTime` esté en el formato esperado `/Date(timestamp)/`\r",
							"pm.test(\"LastSyncedDateTime is in valid /Date(timestamp)/ format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.LastSyncedDateTime).to.match(/^\\/Date\\(\\d+\\)\\/$/, \"LastSyncedDateTime should be in /Date(timestamp)/ format\");\r",
							"});\r",
							"\r",
							"// Verifica que el tiempo de respuesta sea menor a 2000ms (ajustado)\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000, \"Response time should be less than 2000ms\");\r",
							"});\r",
							"\r",
							"// Verifica que el proyecto sea propio (`IsOwnProject` sea verdadero)\r",
							"pm.test(\"Verify the authorization for accessing the project\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.IsOwnProject).to.be.true;\r",
							"});\r",
							"\r",
							"// Verifica que `Content` sea una cadena no vacía\r",
							"pm.test(\"Content is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.Content).to.be.a(\"string\").and.to.have.lengthOf.at.least(1, \"Content should not be empty\");\r",
							"});\r",
							"\r",
							"// Verifica que el campo `Icon` sea un número entero\r",
							"pm.test(\"Icon is a valid integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.Icon).to.be.a(\"number\").and.to.satisfy(Number.isInteger, \"Icon should be an integer\");\r",
							"});\r",
							"\r",
							"// Verifica que `ItemsCount` sea igual a 0\r",
							"pm.test(\"ItemsCount is 0\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.ItemsCount).to.equal(0, \"ItemsCount should be 0\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "jose.condori.r@ucb.edu.bo",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Content\": \"My New Project\",\r\n    \"Icon\":4\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}api/projects.json",
					"host": [
						"{{url}}api"
					],
					"path": [
						"projects.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que el código de estado de la respuesta sea 200, indicando que la solicitud fue exitosa.\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verifica que la respuesta tenga los campos requeridos: TokenString, UserEmail y ExpirationTime.\r",
							"pm.test(\"Response has the required fields - TokenString, UserEmail, and ExpirationTime\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.TokenString).to.exist;\r",
							"    pm.expect(responseData.UserEmail).to.exist;\r",
							"    pm.expect(responseData.ExpirationTime).to.exist;\r",
							"});\r",
							"\r",
							"// Verifica que TokenString sea una cadena de texto no vacía.\r",
							"pm.test(\"TokenString is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.TokenString).to.be.a('string').and.to.have.lengthOf.at.least(1, \"TokenString should not be empty\");\r",
							"});\r",
							"\r",
							"// Verifica que UserEmail tenga un formato válido de correo electrónico.\r",
							"pm.test(\"UserEmail is in a valid email format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.UserEmail).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"UserEmail should be in a valid email format\");\r",
							"});\r",
							"\r",
							"// Verifica nuevamente que TokenString sea una cadena no vacía.\r",
							"pm.test(\"TokenString is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.TokenString).to.be.a('string').and.to.have.lengthOf.at.least(1, \"TokenString should not be empty\");\r",
							"});\r",
							"\r",
							"// Verifica nuevamente que UserEmail tenga un formato válido de correo electrónico.\r",
							"pm.test(\"UserEmail is in a valid email format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.UserEmail).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"UserEmail should be in a valid email format\");\r",
							"});\r",
							"\r",
							"\r",
							"// Verifica que cada propiedad del objeto de respuesta exista y no sea nula.\r",
							"pm.test(\"Each property in the response object is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    Object.keys(responseData).forEach((key) => {\r",
							"        pm.expect(responseData[key]).to.exist.and.to.not.be.null;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "jose.condori.r@ucb.edu.bo",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}api/authentication/token.json",
					"host": [
						"{{url}}api"
					],
					"path": [
						"authentication",
						"token.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Verifica que el código de estado de la respuesta sea 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"    // Comentario: Verifica que la solicitud se ejecute correctamente y devuelva un código 200.\r",
							"});\r",
							"\r",
							"// 2. Verifica que el Content-Type sea application/json\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"    // Comentario: Asegura que la respuesta sea en formato JSON.\r",
							"});\r",
							"\r",
							"// 3. Verifica que el mensaje de error sea \"Invalid Token\"\r",
							"pm.test(\"Error message is 'Invalid Token'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.ErrorMessage).to.equal(\"Invalid Token\");\r",
							"});\r",
							"\r",
							"// 4. Verifica que el código de error sea 103\r",
							"pm.test(\"Error code is 103\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.ErrorCode).to.equal(103);\r",
							"});\r",
							"\r",
							"// 5. Verifica que la respuesta contenga un token eliminado (si se envía un token válido)\r",
							"pm.test(\"Response contains deleted Token information\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    if (responseData.TokenString) {\r",
							"        pm.expect(responseData.TokenString).to.be.a('string');\r",
							"        pm.expect(responseData.UserEmail).to.be.a('string');\r",
							"        pm.expect(responseData.ExpirationTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/);\r",
							"    } else {\r",
							"        pm.expect(responseData.ErrorMessage).to.equal(\"Invalid Token\");\r",
							"    }\r",
							"});\r",
							"\r",
							"// 6. Almacena el ErrorMessage en una variable global\r",
							"var errorMessage = pm.response.json().ErrorMessage;\r",
							"pm.globals.set(\"errorMessage\", errorMessage);\r",
							"\r",
							"// 7. Verifica que ErrorMessage tenga una longitud válida\r",
							"pm.test(\"ErrorMessage tiene una longitud válida\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.ErrorMessage).to.exist.and.to.be.a('string').and.to.have.length.above(0);\r",
							"});\r",
							"\r",
							"// 8. Verifica que la longitud de ErrorMessage esté dentro de un rango aceptable\r",
							"pm.test(\"La longitud de ErrorMessage está dentro de un rango aceptable\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.ErrorMessage.length).to.be.at.most(255);\r",
							"    pm.expect(responseData.ErrorMessage.length).to.be.at.least(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "jose.condori.r@ucb.edu.bo",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}api/authentication/token.json",
					"host": [
						"{{url}}api"
					],
					"path": [
						"authentication",
						"token.json"
					]
				},
				"description": "### Authentication Token Deletion\n\nThis endpoint is used to delete the authentication token via an HTTP DELETE request.\n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\nUpon successful execution, the response will include:\n\n- `ErrorMessage`: (string) A message indicating the result of the operation.\n    \n- `ErrorCode`: (integer) An error code indicating the result of the operation.\n    \n\nAñadir comentarios en español explicando el propósito de cada prueba en los scripts de prueba."
			},
			"response": []
		}
	]
}